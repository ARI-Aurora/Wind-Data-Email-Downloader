# -*- coding: utf-8 -*-
"""NRGEmailRead-Test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dvlFOPVyjtpEgwVWrtDSq3g2vyG9Y3S4

# Testing NRG Email Reader with GSuite

The goal of this notebook is to test the email downloader provided by NRG systems here: https://github.com/nrgpy/data_email_client

## Setup Packages

This codeblock installs the data email client. THis might need to be rerun everytime the runtime is started.
"""


"""## Include Packets"""

from data_email_client import mailer
import email # To be able to walk through the email
from email import message
import os # To retrieve environment variables
import logging # Used to create log file! https://docs.python.org/3/library/logging.html, https://docs.python.org/3/howto/logging.html 
import sys # for standard out stream handler
from typing import List # for List return type hints
import errno
import zipfile #to perform the unziping!
import shutil # for moving files around once downloaded
import pal #for the logging!!

def setupLogging():
    logging.basicConfig(
        level = logging.DEBUG, 
        format='%(asctime)s %(levelname)s: %(message)s',
        handlers = [
            logging.FileHandler('/home/pi/wind_data_shr/downloader.log'),
            logging.StreamHandler(sys.stdout)
        ]
        )
    logging.debug("Downloader Initialized")

def createEmailInstance() -> mailer: 
    ## Create Credentials for the Mail Server
    server = 'imap.gmail.com' #'outlook.office365.com' # 'imap.gmail.com' for gmail
    username = "wind@nwtresearch.com"
    mail_pass = os.getenv('WIND_GMAIL_PASS') # Make sure to export before running
    try:
        logging.debug("Attempting to Connect to Email")
        imap = mailer(server=server, username=username, password=mail_pass)
        logging.debug("Email connected")
        return imap
    except OSError as e:
        logging.error("Could not connect to Email!")
        logging.error(str(e.errno) + " - " + os.strerror(e.errno))
        exit()
    except:
        logging.error("Something else went wrong!!")

def findInboxWithName(imap: mailer, folderName: str) -> List[str]:
    data_boxes = [m for m in imap.mailboxes if folderName in m] # TODO read from main INBOX instead!
    return data_boxes

def downloadAttachmentsFrom(imap: mailer, sender: str, extension: str):
    out_dir = '/home/pi/wind_data_shr/ZIP' #output folder
    archive_folder = '(Wind_Archived)'
    data_boxes = findInboxWithName(imap, "Data")
    imap.search_for_messages(text='status@support.zephirlidar.com', area='from', folder=data_boxes)
    print("imap.result[0][0]: ")
    print(imap.results[0][0])
    logging.debug("List of Message ID's from Lidar: " + str(imap.results[0][1]))
    msgs = imap.results[0][1]
    for emailid in msgs:
        logging.debug("Inspecting Email ID: " + str(emailid.decode("UTF8")))
        resp, data = imap.imap4.fetch(emailid, "(RFC822)")
        labelResp, labelData = imap.imap4.fetch(emailid, '(X-GM-LABELS)')
        for label in labelData:
            if("Wind_Archived" in label.decode("utf-8")):
                logging.debug("Email is already archived, skipping")
            else:
                try:
                    email_body = data[0][1] # Make this more informed!!
                    m = email.message_from_bytes(email_body)
                    count = 0
                    for part in m.walk():
                        logging.debug("Part being Inspectect: " + str(count) + ". Part of type: " + str(part.get_content_maintype()))
                        count += 1
                        if(part.get_content_maintype() == "application"):
                            filename = part.get_filename()
                            logging.debug("Part has File associated: " + str(filename))
                            save_path = os.path.join(out_dir, filename)
                            if not os.path.isfile(save_path):
                                fp = open(save_path, 'wb')
                                fp.write(part.get_payload(decode=True))
                                fp.close()
                                logging.debug(str(filename) + " saved.")
                            else:
                                logging.debug(str(filename) + " File Already Downloaded")
                            processDownloadedZIPLidarFile(save_path)
                            ## TODO: Move Email to 'Wind_Archive' Folder
                            #imap.imap4.copy(emailid, archive_folder)
                            imap.imap4.store(emailid, '+X-GM-LABELS', archive_folder)
                            imap.imap4.store(emailid, '-X-GM-LABELS', '(Data)')
                            imap.imap4.expunge()
                            #imap.imap4.store(emailid, 'FLAGS', '\\Deleted')
                            logging.debug("Email Archived")
                except AttributeError as e: # email_body is none!
                    # Dump email object for debug:
                    logging.error("Writing email object to crash file...")
                    if os.path.exists("/home/pi/wind_data_shr/crash.txt"):
                        os.remove("/home/pi/wind_data_shr/crash.txt")
                    crashfile = open("/home/pi/wind_data_shr/crash.txt", "w")
                    crashfile.write(str(email))
                    crashfile.close()
                    logging.error("Email Data is Mostly Likely None Type...Skipping." + str(e.__dict__))
                    logging.error("Program Failure, Error Number not recognized")



def cleanArchive(imap: mailer):
    # Clear Inbox
    logging.info("Cleaning Wind Archive")
    data_boxes = findInboxWithName(imap, "Wind_Archived")
    imap.search_for_messages(text='status@support.zephirlidar.com', area='from', folder=data_boxes)
    msgs = imap.results[0][1]
    for emailid in msgs:
        resp, data = imap.imap4.fetch(emailid, "(RFC822)")
        email_body = data[0][1] # Make this more informed!!
        m = email.message_from_bytes(email_body)
        subject = str(email.header.make_header(email.header.decode_header(m['Subject'])))
        logging.debug("Cleaning email: " + str(emailid.decode("UTF8")) + ": " + str(subject))
        imap.imap4.store(emailid, '-X-GM-LABELS', '(Data)')
        imap.imap4.expunge()
    logging.info("Archive Cleaned")

def checkEmailForNewLidarData():
    imap = createEmailInstance()
    if imap is not None:
        ## Search for appropriate attachments
        downloadAttachmentsFrom(imap = imap, sender = 'status@support.zephirlidar.com', extension = 'csv') # Download the zx300 files
        imap.imap4.expunge()
    else: 
        logging.error("IMAP was None on creation")
    
def moveLidarFilesToOwnCloud(filePath: str):
    logging.debug("Moving file to owncloud: " + filePath)
    unit = findUnitID(filePath)
    containerName = os.getenv('OWNCLOUD_CONTAINER_NAME') # Make sure to export before running
    dataPath = os.getenv('OWNCLOUD_DATA_PATH')
    workingPath = os.getenv('WORKING_DIR')
    extracted_type = filename.split(".")[-2] # file probably ends in either CSV.ZIP or ZPH.ZIP. this gives the first part
    shutil.unpack_archive(filePath, workingPath + "temp/" + str(unit))
    os.system("docker cp " + workingPath + "temp/" + str(unit) + "." + extracted_type + " " containerName + ":" + dataPath + extracted_type + "/" + str(unit) + "/" + filePath)
    logging.debug(str(unit) + " CSV moved to: " + containerName + ":" + dataPath + "CSV/" + str(unit) + "/" + filePath)
    os.remove(workingPath + "temp/" + str(unit) + "." + str(unit))

def findUnitID(filePath: str) -> int:
        # Detect Unit Number From Filename
    filename = filePath.split("/")[-1]
    unit = filename.split("_")[1].split("@")[0]
    logging.debug("Found UNIT ID: " + str(unit))
    return unit

def processDownloadedZIPLidarFile(filePath: str):
    logging.debug("Processing Download: " + filePath)
    unit = findUnitID(filePath)
    # Check FIle Type and Move accordinly
    extracted_type = filename.split(".")[-2]
    if extracted_type == "CSV":
        shutil.unpack_archive(filePath,"/home/pi/wind_data_shr/CSV/"+str(unit))
        logging.debug(str(unit) + ": CSV moved to " + "/home/pi/wind_data_shr/CSV/"+ str(unit))
    elif extracted_type == "ZPH":
        shutil.unpack_archive(filePath,"/home/pi/wind_data_shr/ZPH/"+str(unit))
        logging.debug(str(unit) + ": ZPH moved to " + "/home/pi/wind_data_shr/ZPH/"+ str(unit))
    # Move Zip to unit ID Folder
    try:
        shutil.move(filePath, "/home/pi/wind_data_shr/ZIP/"+str(unit))
        logging.debug(str(unit) + ": ZIP moved to " + "/home/pi/wind_data_shr/ZIP/"+ str(unit))
    except shutil.Error as e:
        logging.debug("UTIL Error, Most likely file already exists: " + str(e.errno))


def main():
    setupLogging()
    checkEmailForNewLidarData()
    cleanArchive(createEmailInstance()) # Clean Archive is going to become expensive as emails pile up!

if __name__ == "__main__":
    main()
