# -*- coding: utf-8 -*-
"""NRGEmailRead-Test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dvlFOPVyjtpEgwVWrtDSq3g2vyG9Y3S4

# Testing NRG Email Reader with GSuite

The goal of this notebook is to test the email downloader provided by NRG systems here: https://github.com/nrgpy/data_email_client

## Setup Packages

This codeblock installs the data email client. THis might need to be rerun everytime the runtime is started.
"""


"""## Include Packets"""

from data_email_client import mailer
import email # To be able to walk through the email
from email import message
import os # To retrieve environment variables
import logging # Used to create log file! https://docs.python.org/3/library/logging.html, https://docs.python.org/3/howto/logging.html 
import sys # for standard out stream handler
from typing import List # for List return type hints
import errno
import zipfile #to perform the unziping!
import shutil # for moving files around once downloaded

def setupLogging():
    logging.basicConfig(
        level = logging.DEBUG, 
        format='%(asctime)s %(levelname)s: %(message)s',
        handlers = [
            logging.FileHandler('../wind_data_shr/downloader.log'),
            logging.StreamHandler(sys.stdout)
        ]
        )
    logging.debug("Downloader Initialized")

def createEmailInstance() -> mailer: 
    ## Create Credentials for the Mail Server
    server = 'imap.gmail.com' #'outlook.office365.com' # 'imap.gmail.com' for gmail
    username = "wind@nwtresearch.com"
    mail_pass = os.getenv('WIND_GMAIL_PASS') # Make sure to export before running
    try:
        logging.debug("Attempting to Connect to Email")
        imap = mailer(server=server, username=username, password=mail_pass)
        logging.debug("Email connected")
        return imap
    except OSError as e:
        logging.error("Could not connect to Email!")
        try:
            logging.error(str(e.errno) + " - " + errno.errorcode[e.errno])
        except:
            logging.error("Could not determine error code for OSERROR")
        exit()
    except:
        logging.error("Something else went wrong!!")

def findInboxWithName(imap: mailer, folderName: str) -> List[str]:
    data_boxes = [m for m in imap.mailboxes if folderName in m] # TODO read from main INBOX instead!
    return data_boxes

def downloadAttachmentsFrom(imap: mailer, sender: str, extension: str):
    out_dir = '../wind_data_shr/ZIP' #output folder
    archive_folder = '(Wind_Archived)'
    data_boxes = findInboxWithName(imap, "Data")
    imap.search_for_messages(text='status@support.zephirlidar.com', area='from', folder=data_boxes)
    print("imap.result[0][0]: ")
    print(imap.results[0][0])
    logging.debug("List of Message ID's from Lidar: " + str(imap.results[0][1]))
    msgs = imap.results[0][1]
    for emailid in msgs:
        logging.debug("Inspecting Email ID: " + str(emailid.decode("UTF8")))
        resp, data = imap.imap4.fetch(emailid, "(RFC822)")
        try:
            email_body = data[0][1] # Make this more informed!!
            m = email.message_from_bytes(email_body)
            count = 0
            for part in m.walk():
                logging.debug("Part being Inspectect: " + str(count) + ". Part of type: " + str(part.get_content_maintype()))
                count += 1
                if(part.get_content_maintype() == "application"):
                    filename = part.get_filename()
                    logging.debug("Part has File associated: " + str(filename))
                    save_path = os.path.join(out_dir, filename)
                    if not os.path.isfile(save_path):
                        fp = open(save_path, 'wb')
                        fp.write(part.get_payload(decode=True))
                        fp.close()
                        logging.debug(str(filename) + " saved.")
                        processDownloadedZIPLidarFile(save_path)
                        ## TODO: Move Email to 'Wind_Archive' Folder
                        #imap.imap4.copy(emailid, archive_folder)
                        imap.imap4.store(emailid, '+X-GM-LABELS', archive_folder)
                        imap.imap4.store(emailid, '-X-GM-LABELS', '(Data)')
                        imap.imap4.expunge()
                        #imap.imap4.store(emailid, 'FLAGS', '\\Deleted')
                        logging.debug("Email Archived")
        except AttributeError: # email_body is none!
            logging.debug("Email Data is Mostly Likely None Type...Skipping.")

def checkEmailForNewLidarData():
    imap = createEmailInstance()
    if imap is not None:
        ## Search for appropriate attachments
        downloadAttachmentsFrom(imap = imap, sender = 'status@support.zephirlidar.com', extension = 'csv') # Download the zx300 files
        imap.imap4.expunge()
    else: 
        logging.error("IMAP was None on creation")
    

def processDownloadedZIPLidarFile(filePath: str):
    logging.debug("Processing Download: " + filePath)
    # Detect Unit Number From Filename
    filename = filePath.split("/")[-1]
    unit = filename.split("_")[1].split("@")[0]
    logging.debug("Found UNIT ID: " + str(unit))
    # Check FIle Type and Move accordinly
    extracted_type = filename.split(".")[-2]
    if extracted_type == "CSV":
        shutil.unpack_archive(filePath,"../wind_data_shr/CSV/"+str(unit))
    elif extracted_type == "ZPH":
        shutil.unpack_archive(filePath,"../wind_data_shr/ZPH/"+str(unit))
    # Move Zip to unit ID Folder
    shutil.move(filePath, "../wind_data_shr/ZIP/"+str(unit))


def main():
    setupLogging()
    checkEmailForNewLidarData()
    ##processDownloadedZIPLidarFile("../wind_data_shr/ZIP/Wind10_1322@Y2023_M03_D14.CSV.zip")

if __name__ == "__main__":
    main()
